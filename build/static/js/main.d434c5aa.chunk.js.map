{"version":3,"sources":["routes/room.js","routes/CreateRoom.js","App.js","serviceWorker.js","index.js"],"names":["Input","styled","input","Video","div","video","Room","props","previousTime","socketRef","useRef","userRef","partnerRef","PeerRef","youtubePlayer","useState","videoID","setVideoID","onPlayerStateChange","event","console","log","data","target","getCurrentTime","seekchange","current","send","JSON","stringify","type","playVideo","pauseVideo","currentTime","Math","abs","loadVideoPlayer","player","window","YT","Player","height","width","playerVars","events","onStateChange","handleStream","stream","srcObject","handleData","parsed","parse","indexOf","loadVideoById","split","seekTo","useEffect","navigator","mediaDevices","getUserMedia","audio","then","io","connect","emit","match","params","roomID","on","PartnerID","createPeer","id","incoming","addPeer","CallerID","signal","once","error","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","peer","Peer","initiator","trickle","config","url","credential","username","payload","insignal","t","className","style","backgroundColor","color","placeholder","value","onChange","e","onClick","controls","autoPlay","ref","muted","createRoom","uuid","history","push","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d434c5aa.chunk.js","sourcesContent":["import React, { useState,useEffect,useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\nimport styled from 'styled-components';\r\nimport './room.css';\r\n// import {Container,Row,Col} from 'react-bootstrap';\r\n\r\n\r\n\r\nconst Input = styled.input`\r\n    \r\n    color:white;\r\n    background: transparent;\r\n    border: none;\r\n    border-bottom: 1px solid white;\r\n`;\r\nconst Container = styled.div`\r\n    background-color:black;\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100vh;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst LeftRow = styled.div`\r\n    width: 40%;\r\n    height: 100%;\r\n`;\r\n\r\nconst RightRow = styled.div`\r\n    flex: 1;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst Video = styled.video`\r\n    height:50%;\r\n    width: 100%;\r\n    border: 1px solid black;\r\n`;\r\n\r\nconst Room=(props)=>{\r\n    const socketRef=useRef();\r\n    const userRef=useRef();\r\n    const partnerRef=useRef();\r\n    const PeerRef=useRef();\r\n    const youtubePlayer=useRef();\r\n\r\n    const [videoID,setVideoID]=useState('');\r\n    \r\n    \r\n    useEffect(()=>{\r\n        navigator.mediaDevices.getUserMedia({video:true,audio:true}).then((stream)=>{\r\n            \r\n                userRef.current.srcObject=stream;\r\n\r\n                socketRef.current=io.connect('/');\r\n                // console.log(\"hello\");\r\n                // console.log(props.match.params.roomID);\r\n\r\n                \r\n                socketRef.current.emit(\"join room\",props.match.params.roomID);\r\n                \r\n                socketRef.current.on(\"other user\",(PartnerID)=>{\r\n                    console.log(\"creator\");\r\n                    if(PartnerID){\r\n                        console.log(\"partner\");\r\n                        PeerRef.current=createPeer(PartnerID,socketRef.current.id,stream);\r\n                    }\r\n                });\r\n\r\n                \r\n\r\n\r\n                socketRef.current.on(\"caller signal\",(incoming)=>{\r\n                    console.log(\"Caller signal from browser\");\r\n                    PeerRef.current=addPeer(incoming.CallerID,incoming.signal,stream);\r\n                    \r\n                });\r\n                socketRef.current.on(\"callee signal\",(incoming)=>{\r\n                    console.log(\"callee signal from browser\"); \r\n                    PeerRef.current.once(\"error\",(error)=>{\r\n                        console.log(\"Warning\"+error);\r\n                    });\r\n                    //PeerRef.current=testPeer(signal,stream);    \r\n                    PeerRef.current.signal(incoming.signal);\r\n                });\r\n\r\n        })\r\n        \r\n\r\n    },[]);\r\n    useEffect(() => {\r\n        const tag = document.createElement('script');\r\n        tag.src = \"https://www.youtube.com/iframe_api\";\r\n        var firstScriptTag = document.getElementsByTagName('script')[0];\r\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        window.onYouTubeIframeAPIReady = loadVideoPlayer;\r\n    }, []);\r\n    let previousTime;\r\n    let previousAction;\r\n    function onPlayerStateChange(event) {\r\n        \r\n        console.log(\"inside fun\");\r\n        if(event.data != 3) {\r\n            \r\n            if (event.data == 1) {\r\n                \r\n                if((event.target.getCurrentTime()-previousTime)>1)\r\n                    seekchange(event.target.getCurrentTime());\r\n                playVideo();\r\n                \r\n              }\r\n             else if(event.data==2){\r\n                pauseVideo();\r\n            } // we don't need to detect buffering\r\n            \r\n       \r\n     }\r\nelse{\r\n     const currentTime = event.target.getCurrentTime();\r\n     \r\n    if (Math.abs(previousTime - currentTime) > 1 ) {\r\n        // we have Seek event and we have time when it was started(previousTime). Also we have finish time of Seek event(currentTime).\r\n        console.log(\"seek\");\r\n        seekchange(currentTime);\r\n     }\r\n     previousTime = currentTime;\r\n     previousAction = event.data;\r\n    }\r\n\r\n   \r\n    }\r\n\r\n   \r\n    function loadVideoPlayer() {\r\n        const player = new window.YT.Player('player', {\r\n            \r\n            height: '390',\r\n            width: '640',\r\n            playerVars: { \r\n                'autoplay': 0,\r\n                'controls': 1, \r\n                'rel' : 0,\r\n                'fs' : 1,\r\n            },\r\n            events:{\r\n                onStateChange:onPlayerStateChange,\r\n                \r\n            }\r\n            \r\n        });\r\n        \r\n        \r\n        youtubePlayer.current = player;\r\n    }\r\n    \r\n    function handleStream(stream){\r\n        partnerRef.current.srcObject=stream;\r\n        \r\n    }\r\n    function handleData(data)\r\n    {\r\n        const parsed = JSON.parse(data);\r\n        if(parsed.type===\"newVideo\")\r\n        {\r\n            if(parsed.data.indexOf(\"=\")==-1)\r\n            {\r\n                \r\n                youtubePlayer.current.loadVideoById(parsed.data.split(\".be/\")[1]);\r\n                console.log(parsed.data.split(\".be/\")[1]);\r\n                \r\n            }\r\n            else{\r\n                youtubePlayer.current.loadVideoById(parsed.data.split(\"=\")[1]);\r\n            }\r\n        }\r\n        else if(parsed.type===\"pause\")\r\n        {\r\n            youtubePlayer.current.pauseVideo();\r\n        }\r\n        else if(parsed.type==\"play\"){\r\n            youtubePlayer.current.playVideo();\r\n        }\r\n        else\r\n        {\r\n            youtubePlayer.current.seekTo(parsed.data,true);\r\n            youtubePlayer.current.playVideo();\r\n        }\r\n    }\r\n    const createPeer = (PartnerID,CallerID,stream) =>{\r\n        const peer = new Peer({\r\n            initiator:true,\r\n            trickle:false,\r\n            stream:stream,\r\n            config:{\r\n                'iceServers': [{\r\n                    url: 'stun:stun1.l.google.com:19302'\r\n                  },\r\n                  {\r\n                    url: 'turn:numb.viagenie.ca',\r\n                    credential: 'muazkh',\r\n                    username: 'webrtc@live.com'\r\n                }\r\n            ]\r\n            }\r\n        });\r\n        peer.on(\"signal\",(signal)=>{\r\n            const payload={\r\n                PartnerID,\r\n                CallerID,\r\n                signal\r\n            }\r\n            //peer.signal(signal);\r\n            socketRef.current.emit(\"call partner\",payload);\r\n            \r\n        });\r\n\r\n        \r\n        peer.on(\"stream\",handleStream);\r\n        peer.on(\"data\",handleData);\r\n        \r\n        return peer;\r\n    }\r\n\r\n    const addPeer = (CallerID,insignal,stream) =>{\r\n        console.log(\"inside addpeer\");\r\n        const peer = new Peer({\r\n            initiator:false,\r\n            trickle:false,\r\n            stream:stream,\r\n            config:{\r\n                'iceServers': [{\r\n                    url: 'stun:stun1.l.google.com:19302'\r\n                  },\r\n                  {\r\n                    url: 'turn:numb.viagenie.ca',\r\n                    credential: 'muazkh',\r\n                    username: 'webrtc@live.com'\r\n                }\r\n            ]\r\n            }\r\n        });\r\n        peer.on(\"signal\",(signal)=>{\r\n            console.log(\"inside peer\");\r\n            const payload={\r\n                CallerID,\r\n                signal\r\n            }\r\n            socketRef.current.emit(\"accept call\",payload);\r\n        });\r\n        peer.once(\"error\",(error)=>{\r\n            console.log(\"peer error\"+error);\r\n        });\r\n        peer.on(\"stream\",handleStream);\r\n        peer.on(\"data\",handleData);\r\n        peer.signal(insignal);\r\n        \r\n        return peer;\r\n    }\r\n\r\n    function seekchange(t)\r\n    {\r\n        PeerRef.current.send(JSON.stringify({type:\"seek\",data:t}));\r\n        //youtubePlayer.current.seekTo(t,false);\r\n        console.log(t);\r\n    }\r\n    \r\n    function loadVideo() {\r\n        PeerRef.current.send(JSON.stringify({type: \"newVideo\", data: videoID}));\r\n        if(videoID.indexOf(\"=\")==-1)\r\n        {\r\n            \r\n            youtubePlayer.current.loadVideoById(videoID.split(\".be/\")[1]);\r\n            console.log(videoID.split(\".be/\")[1]);\r\n            \r\n        }\r\n        else{\r\n            youtubePlayer.current.loadVideoById(videoID.split(\"=\")[1]);\r\n        }\r\n        \r\n    }\r\n    function playVideo(){\r\n        PeerRef.current.send(JSON.stringify({type:'play'}));\r\n        youtubePlayer.current.playVideo();\r\n    }\r\n    function pauseVideo(){\r\n        PeerRef.current.send(JSON.stringify({type:'pause'}));\r\n        youtubePlayer.current.pauseVideo();\r\n    }\r\n    \r\n\r\n    return(\r\n        <div>\r\n        <nav className=\"navbar\" style={{height:\"50px\",backgroundColor:\"red\"}}>\r\n        \r\n        <h4 style={{color:\"black\"}}><i className=\"youtube icon large\"></i>Youtube Party</h4>\r\n    </nav>\r\n        <div className=\"container mt-5\">\r\n            <br />\r\n            \r\n        \r\n            \r\n            <div className=\"row\">\r\n            \r\n            \r\n            <div className=\"col-12 col-lg-6\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"ui inverted segment fluid\" id=\"player\" />\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"ui inverted segment\" style={{backgroundColor:\"black\"}}>\r\n                        <Input type=\"text\" placeholder=\"Video link\" value={videoID} onChange={e=>setVideoID(e.target.value)}></Input>\r\n                        <br /><br />\r\n                        <button style={{color:\"black\"}} className=\"ui red button\" onClick={loadVideo}>Load Video</button>\r\n                    </div>\r\n                </div>   \r\n            </div>\r\n            <div className=\"col-lg-1\"></div>\r\n            <div className=\"col-12 col-lg-5\">\r\n                    <div className=\"row justify-content-center\">\r\n                        \r\n                    <Video controls autoPlay ref={partnerRef} />\r\n                    \r\n                    \r\n                    </div>\r\n                    <br />\r\n                \r\n                    <div className=\"row justify-content-center\">\r\n                    \r\n                    \r\n                    <Video muted controls autoPlay ref={userRef} />\r\n                    \r\n                    </div>\r\n                    <br />\r\n                    \r\n                \r\n            </div>\r\n            </div>\r\n        \r\n        </div>\r\n        </div>\r\n        \r\n        \r\n    );\r\n    \r\n\r\n}\r\n\r\nexport default Room;\r\n\r\n\r\n\r\n{/* <Container>\r\n        <LeftRow>\r\n            <Video muted controls autoPlay ref={userRef} />\r\n            <Video controls autoPlay ref={partnerRef} />\r\n        </LeftRow>\r\n        <RightRow>\r\n            <div className=\"ui inverted segment\" id=\"player\" />\r\n           \r\n            <div className=\"ui inverted segment\" style={{backgroundColor:\"black\"}}>\r\n            <Input type=\"text\" placeholder=\r\n            \"video link\" value={videoID} onChange={e=>setVideoID(e.target.value)}></Input>\r\n            <button className=\"ui inverted orange button\" onClick={loadVideo}>Load Video</button></div>\r\n           \r\n           \r\n            \r\n        </RightRow>\r\n    </Container> */}\r\n\r\n","import React from 'react';\r\nimport {v1 as uuid} from 'uuid';\r\n\r\nconst createRoom = (props) =>{\r\n    function create()\r\n    {\r\n        const id = uuid();\r\n        props.history.push(`/room/${id}`); \r\n    }\r\n    return(\r\n        \r\n        <div className=\"d-flex justify-content-center mt-5\" >\r\n        \r\n            \r\n                \r\n            <button style={{color:\"black\"}} className=\"ui red button\" onClick={create}>Create room</button>\r\n            \r\n            \r\n            \r\n                \r\n            </div>\r\n            \r\n            \r\n        \r\n    //  </div>\r\n    );\r\n}\r\nexport default createRoom;\r\n\r\n{/* <div className=\"d-flex justify-content-center\" style={{marginTop:\"50%\"}}>\r\n\r\n</div> */}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter,Route,Switch} from 'react-router-dom';\r\nimport Room from './routes/room';\r\nimport createRoom from './routes/CreateRoom';\r\n\r\nconst App = (props) => {\r\n    return(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path='/' exact component={createRoom}></Route>\r\n            <Route path='/room/:roomID' component={Room}></Route>\r\n        </Switch>\r\n    </BrowserRouter>\r\n    // <div>Welcome</div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}